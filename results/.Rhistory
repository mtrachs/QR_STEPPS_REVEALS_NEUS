install.packages('Bchron')
library(Bchron)
?BchronCalibrate
BchronCalibrate(5126,100,calCurves = 'intcal13')
hae <-BchronCalibrate(5126,100,calCurves = 'intcal13')
hae$Date1$ages
sum(hae$Date1$ageGrid*hae$Date1$densities)
hae <-BchronCalibrate(4806,100,calCurves = 'intcal13')
sum(hae$Date1$ageGrid*hae$Date1$densities)
install.packages('rgdal')
#define working directory
wd <- '~/r_code_calibration_paper/'
setwd('~/stepps_110_sites/')
g = list(suff_fit  = 'cal_g_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'gaussian',
one_psi   = TRUE,
one_gamma = TRUE,
EPs       = FALSE)
g_Kpsi = list(suff_fit  = 'cal_g_Kpsi_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'gaussian',
one_psi   = FALSE,
one_gamma = TRUE,
EPs       = TRUE)
g_Kpsi_Kgamma = list(suff_fit  = 'cal_g_Kpsi_Kgamma_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'gaussian',
one_psi   = FALSE,
one_gamma = FALSE,
EPs       = TRUE)
g_Kgamma = list(suff_fit  = 'cal_g_Kgamma_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'gaussian',
one_psi   = TRUE,
one_gamma = FALSE,
EPs       = TRUE)
pl = list(suff_fit  = 'cal_pl_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'pl',
one_a     = TRUE,
one_b     = TRUE,
one_gamma = TRUE,
EPs       = FALSE)
pl_Kgamma = list(suff_fit  = 'cal_pl_Kgamma_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'pl',
one_a     = TRUE,
one_b     = TRUE,
one_gamma = FALSE,
EPs       = TRUE)
pl_Ka = list(suff_fit  = 'cal_pl_Ka_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'pl',
one_a     = FALSE,
one_b     = TRUE,
one_gamma = TRUE,
EPs       = TRUE)
pl_Ka_Kb = list(suff_fit  = 'cal_pl_Ka_Kb_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'pl',
one_a     = FALSE,
one_b     = FALSE,
one_gamma = TRUE,
EPs       = TRUE)
pl_Ka_Kb_Kgamma = list(suff_fit  = 'cal_pl_Ka_Kb_Kgamma_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'pl',
one_a     = FALSE,
one_b     = FALSE,
one_gamma = FALSE,
EPs       = TRUE)
pl_Ka_Kgamma = list(suff_fit  = 'cal_pl_Ka_Kgamma_EPs_NEUS',
suff_dat = '12taxa_mid_comp_ALL_v0.2',
kernel    = 'pl',
one_a     = FALSE,
one_b     = TRUE,
one_gamma = FALSE,
EPs       = TRUE)
runs = list(g, g_Kpsi, g_Kgamma, g_Kpsi_Kgamma)
runs = list(pl, pl_Ka, pl_Ka_Kb, pl_Ka_Kb_Kgamma, pl_Kgamma, pl_Ka_Kgamma)
#runs = list(pl, pl_Ka,  pl_Ka_Kb_Kgamma, pl_Kgamma, pl_Ka_Kgamma)
#runs = list(pl_Ka_Kb, pl_Ka_Kb_Kgamma, pl_Kgamma, pl_Ka_Kgamma)
#runs = list(pl_Ka_Kgamma)
runs = list(g, g_Kpsi, g_Kgamma,g_Kpsi_Kgamma,pl,pl_Kgamma,pl_Ka,pl_Ka_Kgamma,pl_Ka_Kb_Kgamma)
# runs = list(g,pl,g_Kpsi_Kgamma,pl_Ka_Kgamma)
# runs = list(pl_Kgamma)
# runs = list(pl_Ka_Kb,pl_Ka_Kb_Kgamma)
runs = list(pl_Ka_Kb_Kgamma,pl_Ka_Kb)
#runs = list(pl, pl_Ka,  pl_Ka_Kb_Kgamma, pl_Kgamma, pl_Ka_Kgamma)
#runs = list(pl_Ka_Kb, pl_Ka_Kb_Kgamma, pl_Kgamma, pl_Ka_Kgamma)
#runs = list(pl_Ka_Kgamma)
runs = list(g, g_Kpsi, g_Kgamma,g_Kpsi_Kgamma,pl,pl_Kgamma,pl_Ka,pl_Ka_Kgamma,pl_Ka_Kb_Kgamma)
run <- runs[[1]]
library(rstan)
library(ggplot2)
library(fields, quietly=TRUE)
library(abind)
setwd(paste0(wd,'results'))
wd1 = getwd()
path_utils = 'utils'
path_data  = 'data/'
path_out   = 'data/'
path_figs  = 'plots'
suff  =''
rerun =FALSE#TRUE
kernel   = run$kernel
suff_fit = run$suff_fit
suff_dat = run$suff_dat
if (kernel == 'gaussian'){
one_psi    = run$one_psi
one_gamma  = run$one_gamma
EPs        = run$EPs
} else if (kernel == 'pl'){
one_a      = run$one_a
one_b      = run$one_b
one_gamma  = run$one_gamma
EPs        = run$EPs
}
save_plots = TRUE
rescale    = 1e6
source(file.path(path_utils, 'process_funs.r'))
source(file.path(path_utils, 'plot_funs.r'))
path_figs1 = sprintf('%s/%s', path_figs, suff_fit)
if (!file.exists(path_figs1)){
dir.create(file.path(path_figs1))
}
#load(sprintf('%s/cal_data_%s.rdata', path_data, suff_dat))
load(paste0(wd,'calibration/data/elicitation_neus_certainty_median_110_sites_only_abies_new_species.RData'))
taxa <- colnames(y)
file.name <- strsplit(suff_fit,'NEUS')
file.name <- file.name[[1]][1]
if(length(grep('pl',file.name)) ==1){
file.name <- paste(file.name,'modified_a_110',sep='')
}else
file.name <- paste(file.name,'110',sep='')
fname <- paste(path_data,file.name,'.csv',sep='')
fit <- read_stan_csv(fname)
post = rstan::extract(fit, permuted=FALSE, inc_warmup=FALSE)
#####################################################################################
# read in data and source utils
#####################################################################################
npars   = K # always have K phis
if (kernel=='gaussian'){
if (one_psi){ npars = npars + 1 } else { npars = npars + K}
if (one_gamma){ npars = npars + 1 } else { npars = npars + K}
if (EPs & !one_psi){ npars = npars + 2} # mu and sigma
if (EPs & !one_gamma){ npars = npars + 2} # mu and sigma, plus log_gamma
} else if (kernel=='pl'){
if (one_gamma){npars = npars + 1} else {npars = npars + K}
if (one_a){npars = npars + 1} else {npars = npars + K}
if (one_b){npars = npars + 1} else {npars = npars + K}
if (EPs & !one_gamma){ npars = npars + 2} # mu and sigma, plus log_gamma
if (EPs & !one_a){ npars = npars + 2 } # mu and sigma, plus log_a
if (EPs & !one_b){ npars = npars + 2 } # mu and sigma, plus log_b
}
par_idx = c(seq(1,npars), ncol(post[,1,]))
print(fit)
summary(fit)$summary[,'mean'][par_idx]
ess(fit)
trace_plots(fit, npars, N_cores, suff, save_plots=save_plots, fpath=path_figs1)
# compare phi and a for variable PL
col_names = sapply(strsplit(colnames(post[,1,]), '\\['), function(x) x[[1]][1])
a   = post[,1,which(col_names == 'a')]
phi = post[,1,which(col_names == 'phi')]
print(waic(fit))
print(aic(fit, npars))
log_lik(fit)
# sink(sprintf('%s/%s/summary.txt', wd, path_figs1), type='output')
sink(sprintf('%s/summary.txt', path_figs1), type='output')
suff_fit
cat('\n')
print('The taxa modelled are:')
print(taxa)
cat('\n')
print('Summary of posterior parameter vals:')
print(get_quants(fit, npars))
cat('\n')
print('WAIC:')
print(waic(fit))
print('AIC:')
print(aic(fit, npars))
cat('\n')
print('Log likelihood')
print(log_lik(fit))
# unlink(sprintf('%s/%s/summary.txt', wd, path_figs1))
# unlink(sprintf('%s/summary.txt', path_figs1))
sink()
plot_par_vals(post, parname='phi', taxa,wd1, path_figs1)
if (kernel=='gaussian'){
if (!one_psi){
plot_par_vals(post, parname='psi', taxa, wd1, path_figs1)
}
}
if (!one_gamma){
plot_par_vals(post, parname='gamma', taxa, wd1, path_figs1)
}
if (kernel=='pl'){
if (!one_a){
plot_par_vals(post, parname='a', taxa, wd1, path_figs1)
}
if (!one_b){
plot_par_vals(post, parname='b', taxa, wd1, path_figs1)
}
}
pollen_props = compute_props(y, taxa)
# scale the veg by phi
local_preds  = phi_scale_veg(post, N_cores, r, idx_cores)
local_pollen_veg_plot2(r, idx_cores, pollen_props, local_preds, taxa, suff, save_plots, fpath=path_figs1)
sum_w <- build_sumw_pot(post, K, N_pot, d_pot, run)
preds_out = pollen_preds(post, N_cores, d, idx_cores, r, sum_w, run)
alpha = preds_out$alpha # DM precision pars
preds = preds_out$preds
pollen_preds_plot(preds, pollen_props, N_cores, r, idx_cores, taxa, suff=suff, save_plots=save_plots, fpath=path_figs1)
for (run in runs){
source('R/cal_process_median.r')
}
