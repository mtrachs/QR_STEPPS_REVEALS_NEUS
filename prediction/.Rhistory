install.packages('Bchron')
library(Bchron)
?BchronCalibrate
BchronCalibrate(5126,100,calCurves = 'intcal13')
hae <-BchronCalibrate(5126,100,calCurves = 'intcal13')
hae$Date1$ages
sum(hae$Date1$ageGrid*hae$Date1$densities)
hae <-BchronCalibrate(4806,100,calCurves = 'intcal13')
sum(hae$Date1$ageGrid*hae$Date1$densities)
install.packages('rgdal')
#define working directory
wd <- '~/r_code_calibration_paper/'
#-------------------------------------------------------------------------------------------------------------------
#this code makes figure 2
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
# First load and post process the output of STEPPS
library(rstan)
library(RColorBrewer)
library(fields)
library(sp)
library(maptools)
#-----------------------------------------------------------------------------------------------
repo_location <- wd
setwd(paste(repo_location,'prediction/',sep=''))
help.fun.loc <- 'utils/'
data.loc <- 'output_nb/'
plot.loc <- 'plots/'
#-----------------------------------------------------------------------------------------------
us.shp <- readShapeLines('data/map_data/us_alb.shp',proj4string=CRS('+init=epsg:3175'))
#-----------------------------------------------------------------------------------------------
taxa <- sort(c('Maple','Birch','Hickory','Chestnut','Other conifer','Other hardwood',
'Beech','Ash','Tamarack','Spruce','Pine','Oak','Hemlock'))
K <- length(taxa)
######################################################################################################################
#load pre-processed output
######################################################################################################################
proc.output.loc <- 'process_output/'
mean.proportion <- readRDS(paste(proc.output.loc,'combined_mean.RDS',sep=''))
median.proportion <-readRDS(paste(proc.output.loc,'combined_median.RDS',sep=''))
lb.proportion <- readRDS(paste(proc.output.loc,'combined_lb.RDS',sep=''))
ub.proportion <- readRDS(paste(proc.output.loc,'combined_ub.RDS',sep=''))
diff_bounds_proportion <- ub.proportion - lb.proportion
load(paste0(repo_location,'calibration/data/for_prediction_110_sites_only_abies_new_species.RData'))
veg <- as.matrix(r)
#Transform pollen coordinates
sputm <- SpatialPoints(pollen_coords, proj4string=CRS("+init=epsg:4326"))
spgeo <- spTransform(sputm, CRS("+init=epsg:3175"))
pollen_coord_us <- spgeo@coords
#---------------------------------------------------------------------------------------------------------------------
#load REVEALS
reveals_reconstruction <- readRDS(paste0(wd,'Reveals_NEUS/output/unc_stand_veg_pred_ppe_literature_fallspeed_measured_composition_no_larch_lake_size_correct_dwm_gpm neutral_1e+05_regional_vegetation_aggregated.RDS'))
reveals_coord <- readRDS(paste0(wd,'Reveals_NEUS/output/unc_stand_ratio_pred_ppe_literature_fallspeed_constant_composition_larch_lake_size_correct_dwm_gpm neutral_1e+05_regional_vegetation_aggregated_coord.RDS'))
reveals_median <- reveals_reconstruction[,grep('median',colnames(reveals_reconstruction))]
reveals_mean <- reveals_reconstruction[,grep('mean',colnames(reveals_reconstruction))]
colnames(reveals_median)[grep('Other',colnames(reveals_median))] <- c('Other conifer','Other hardwood')
colnames(reveals_mean)[grep('Other',colnames(reveals_mean))] <- c('Other conifer','Other hardwood')
#Transform reveals coordinates in to US coordinates
sputm <- SpatialPoints(reveals_coord[,c('x','y')], proj4string=CRS("+init=epsg:4326"))
spgeo <- spTransform(sputm, CRS("+init=epsg:3175"))
reveals_coord_us <- spgeo@coords
#---------------------------------------------------------------------------------------------------------------------
#find grid cells where REveals has a prediction
bounding_coords <- matrix(ncol=4, nrow = nrow(reveals_coord))
bounding_coords[,1] <- reveals_coord[,'x']-0.5
bounding_coords[,2] <- reveals_coord[,'x']+0.5
bounding_coords[,3] <- reveals_coord[,'y']-0.5
bounding_coords[,4] <- reveals_coord[,'y']+0.5
colnames(bounding_coords) <- c('lon.min','lon.max','lat.min','lat.max')
spgeo <- SpatialPoints(veg_coords, proj4string=CRS("+init=epsg:3175"))
sputm <- spTransform(spgeo, CRS("+init=epsg:4326"))
veg_coords_utm  <- sputm@coords #transformation is successful
colnames(veg_coords_utm) <- c('lon','lat')
coords_assign <-  matrix(ncol = 1,nrow =nrow(veg_coords))
for(x in 1:nrow(bounding_coords)){
coords_assign[((veg_coords_utm[,'lon'] > bounding_coords[x,"lon.min"]) & (veg_coords_utm[,'lon'] < bounding_coords[x,"lon.max"]) &
(veg_coords_utm[,'lat'] > bounding_coords[x,"lat.min"]) & (veg_coords_utm[,'lat'] < bounding_coords[x,"lat.max"]))] <- x
}
#-----------------------------------------------------------------------------------------------------------------------
#Figure begins
#----------------------------------------------------------------------------------------------------------------------
setwd(paste(repo_location,'/figures',sep=''))
plot.loc <- 'figures/'
taxa_plot <- c('Beech','Hemlock','Oak','Spruce')
colours <- rev(brewer.pal(10,'RdYlBu'))
east <- sort(unique(veg_coords[,'meters.east']))
north <- sort(unique(veg_coords[,'meters.north']))
breaks <- c(0,0.01,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,1)
breaks1 <- c(0,0.01,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,0.7)
breaks2 <- c(0,0.01,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,NA)
#pdf(paste(plot.loc,'figure_2_all_dec.pdf',sep=''),height = 44,width = 10)
pdf(paste(plot.loc,'figure_2.pdf',sep=''),height = 16,width = 10)
#par(mfrow=c(11,3))
par(mfrow=c(4,3))
par(oma=c(1,2,2,2),mar=c(0.1,0.1,0.1,0.1))
for(y in taxa_plot){
par(cex=1)
# plot vegetatin data
categories <- cut(veg[,y],breaks,include.lowest = TRUE,labels = FALSE)
colours.plot <- colours[categories]
plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north))
points(veg_coords,col=colours.plot,pch = 15)
points(pollen_coord_us,col=1,pch = 16,cex = 1)
plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
mtext(side = 2,font=2,line=0,text = y,cex = 2)
if(y==taxa_plot[1]) {
mtext(side = 3,font=2,line=0,text = 'Township survey',cex = 2)
}
#-
#-------------------------------------------------------------------------------------------------------------------
# plot STEPPS reconstruction
#categories <- cut(median.proportion[,y],breaks,include.lowest = TRUE,labels = FALSE)
categories <- cut(mean.proportion[,y],breaks,include.lowest = TRUE,labels = FALSE)
colours.plot <- colours[categories]
plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north))
if(y%in%taxa_plot[seq(1,11,4)]){
image.plot(east, north,z = matrix(ncol= length(north),rep(-1,length(east)*length(north))),zlim=c(0,0.7),col = colours,
breaks= breaks1,lab.breaks = breaks2,add = TRUE,horizontal=TRUE,
legend.width = 6,legend.mar = 2.5,legend.lab='Proportion')
}
points(veg_coords,col=colours.plot,pch = 15)
points(pollen_coord_us,col=1,pch = 16,cex = 1)
plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
if(y==taxa_plot[1]) {
mtext(side = 3,font=2,line=0,text = 'STEPPS',cex = 2)
}
#-----------------------------------------------------------------------------------------------------------------
# plot REVEALS reconstruction
#categories <- cut(reveals_median[,grep(y,colnames(reveals_median))]/100,breaks,include.lowest = TRUE,labels = FALSE)
categories <- cut(reveals_mean[,grep(y,colnames(reveals_mean))]/100,breaks,include.lowest = TRUE,labels = FALSE)
colours.plot <- colours[categories]
colours.plot.final <- matrix(ncol=1, nrow=length(coords_assign))
for(i in 1:length(colours.plot)){
colours.plot.final[coords_assign==i] <- colours.plot[i]
}
colours.plot.final[is.na(colours.plot.final)] <- 'gray'
plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north))
points(veg_coords,col=colours.plot.final,pch = 15,cex=0.5)
points(pollen_coord_us,col=1,pch = 16,cex = 1)
plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
if(y%in%taxa_plot[seq(1,11,4)]) {
mtext(side = 3,font=2,line=0,text = 'REVEALS',cex = 2)
}
#-----------------------------------------------------------------------------------------------------------------
}
dev.off()
###########################################################################################################################
#
###########################################################################################################################
taxa_plot <- taxa[!taxa%in%c('Chestnut','Tamarack')]
pdf(paste(plot.loc,'SF3.pdf',sep=''),height = 52,width = 13.3333)
par(mfrow=c(13,4))
par(oma=c(2,2,2,2),mar=c(0.1,0.1,0.1,0.1))
for(y in taxa){
par(cex=1)
# plot vegetatin data
categories <- cut(median.proportion[,y],breaks,include.lowest = TRUE,labels = FALSE)
colours.plot <- colours[categories]
plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north))
points(veg_coords,col=colours.plot,pch = 15)
points(pollen_coord_us,col=1,pch = 16,cex = 1)
plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
mtext(side = 2,font=2,line=0,text = y,cex = 2)
if(y==taxa_plot[1]) {
mtext(side = 3,font=2,line=0,text = 'Median',cex = 2)
}
categories <- cut(diff_bounds_proportion[,y],breaks,include.lowest = TRUE,labels = FALSE)
colours.plot <- colours[categories]
plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north))
points(veg_coords,col=colours.plot,pch = 15)
points(pollen_coord_us,col=1,pch = 16,cex = 1)
plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
if(y==taxa_plot[1]) {
mtext(side = 3,font=2,line=0,text = 'Prediction Interval',cex = 2)
}
#-
#-------------------------------------------------------------------------------------------------------------------
# plot STEPPS reconstruction
#categories <- cut(median.proportion[,y],breaks,include.lowest = TRUE,labels = FALSE)
categories <- cut(lb.proportion[,y],breaks,include.lowest = TRUE,labels = FALSE)
colours.plot <- colours[categories]
plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north))
image.plot(east, north,z = matrix(ncol= length(north),rep(-1,length(east)*length(north))),zlim=c(0,0.7),col = colours,
breaks= breaks1,lab.breaks = breaks2,add = TRUE,horizontal=TRUE,
legend.width = 4,legend.mar = 3.5)
points(veg_coords,col=colours.plot,pch = 15)
points(pollen_coord_us,col=1,pch = 16,cex = 1)
plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
if(y==taxa_plot[1]) {
mtext(side = 3,font=2,line=0,text = 'Lower Bound',cex = 2)
}
#-----------------------------------------------------------------------------------------------------------------
# plot REVEALS reconstruction
#categories <- cut(reveals_median[,grep(y,colnames(reveals_median))]/100,breaks,include.lowest = TRUE,labels = FALSE)
categories <- cut(ub.proportion[,y],breaks,include.lowest = TRUE,labels = FALSE)
colours.plot <- colours[categories]
colours.plot.final <- matrix(ncol=1, nrow=length(coords_assign))
for(i in 1:length(colours.plot)){
colours.plot.final[coords_assign==i] <- colours.plot[i]
}
colours.plot.final[is.na(colours.plot.final)] <- 'gray'
plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north))
points(veg_coords,col=colours.plot,pch = 15)
points(pollen_coord_us,col=1,pch = 16,cex = 1)
plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
if(y==taxa_plot[1]) {
mtext(side = 3,font=2,line=0,text = 'Upper Bound',cex = 2)
}
#-----------------------------------------------------------------------------------------------------------------
# plot REVEALS reconstruction with stepps ppe
# categories <- cut(reveals_median_stepps_ppe[,grep(y,colnames(reveals_median_stepps_ppe))]/100,breaks,include.lowest = TRUE,labels = FALSE)
# colours.plot <- colours[categories]
#
# plot(us.shp[c(3,9,12,14,16:20),],xlim=range(east),ylim=range(north),main =ifelse(y==taxa_plot[1],'REVEALS STEPPS PPE',''),cex.main = 2)
# points(reveals_coord_us,col=colours.plot,pch = 15,cex =4)
# points(pollen_coord_us,col=1,pch = 16,cex = 0.75)
# plot(us.shp[c(3,9,12,14,16:20),],add=TRUE)
}
dev.off()
rm(list=ls())
#define working directory
wd <- '~/r_code_calibration_paper/'
source(paste0(wd,'figures/R/Figure_2.R'))
source(paste0(wd,'figures/R/Figure_2.r'))
rm(list=ls())
#define working directory
wd <- '~/r_code_calibration_paper/'
#-----------------------------------------------------------------------------------------------------------
#Figure 3 of manuscript
#------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------
library(rstan)
library(RColorBrewer)
library(fields)
library(sp)
library(maptools)
library(rioja)
#------------------------------------------------------------------------------------------------------------------------
#compare REVEALS and STEPPS
#------------------------------------------------------------------------------------------------------------------------
reveals.loc <- paste0(wd,'Reveals_NEUS/')
reveals.data <- 'output/'
help.fun.loc <- paste0(wd,'figures/utils/')
source(paste(help.fun.loc,'pairs_functions.R',sep=''))
reveals.output <- readRDS(paste(reveals.loc,reveals.data,
'unc_stand_veg_pred_ppe_literature_fallspeed_measured_composition_no_larch_lake_size_correct_dwm_gpm neutral_1e+05_regional_vegetation.RDS',sep=''))
mean.sim.index <- grep('mean',colnames(reveals.output))
reveals.reconstructions <- reveals.output[,mean.sim.index]
colnames(reveals.reconstructions)[grep('Other',colnames(reveals.reconstructions))] <- c('Other conifer',"Other hardwood")
#is currently necessary because REVEALS stil simulates Elm and Poplar
reveals.reconstructions <- reveals.reconstructions[,!colnames(reveals.reconstructions)%in%c('Elm.meansim','Poplar.meansim')]
#------------------------------------------------------------------------------------------------------------------------
#load vegetation data
#------------------------------------------------------------------------------------------------------------------------
load('~/workflow_stepps_calibration/calibration/data/for_prediction_110_sites_only_abies_new_species.RData')
#reveals.coords <- reveals.output[,c()]
# sputm <- SpatialPoints(reveals.coords, proj4string=CRS("+init=epsg:4326"))
# spgeo <- spTransform(sputm, CRS("+init=epsg:3175"))
# reveals.coords.us <- spgeo@coords
#------------------------------------------------------------------------------------------------------------------------
#load vegetation data
#------------------------------------------------------------------------------------------------------------------------
load(paste0(wd,'calibration/data/for_prediction_110_sites_only_abies_new_species.RData'))
r <- readRDS(paste0(wd,'calibration/data/veg_mean_dissimilarity.RDS'))
rm(list=ls())
#define working directory
wd <- '~/r_code_calibration_paper/'
#load data
library(rstan)
library(RColorBrewer)
library(fields)
library(sp)
library(maptools)
library(colorRamps)
library(rioja)
#-----------------------------------------------------------------------------------------------
setwd(paste0(wd,'prediction/'))
help.fun.loc <- 'utils/'
data.loc <- 'output_nb//'
plot.loc <- 'plots/'
#-----------------------------------------------------------------------------------------------
us.shp <- readShapeLines('data/map_data/us_alb.shp',proj4string=CRS('+init=epsg:3175'))
#-----------------------------------------------------------------------------------------------
taxa <- sort(c('Maple','Birch','Hickory','Chestnut','Other conifer','Other hardwood',
'Beech','Ash','Tamarack','Spruce','Pine','Oak','Hemlock'))
K <- length(taxa)
proc.output.loc <- 'process_output/'
mean.proportion <- readRDS(paste(proc.output.loc,'combined_mean.RDS',sep=''))
median.proportion <-readRDS(paste(proc.output.loc,'combined_median.RDS',sep=''))
lb.proportion <- readRDS(paste(proc.output.loc,'combined_lb.RDS',sep=''))
ub.proportion <- readRDS(paste(proc.output.loc,'combined_ub.RDS',sep=''))
getwd()
#--------------------------------------------------------------------------------------------------------------------------
#load vegetation data
load(paste0(wd,'calibration/data/for_prediction_110_sites_only_abies_new_species.RData'))
r <- readRDS(paste0(wd,'calibration/data/veg_mean_dissimilarity.RDS'))
#again load meanof Paciorek et al.
r <- readRDS('~/workflow_stepps_calibration/calibration/data/veg_mean_dissimilarity.RDS')
source(paste0(wd,'calibration/helper_funs/load_vegetation_data_mean.R'))
veg.comp
names(veg.comp) <- veg.names
#find coordinates
meters.east <- veg$dim$x$vals
meters.north <- veg$dim$y$vals
#plot a pdf of a posterior
plot(density(veg.comp$Oak[50,50,]))
#first let's prepare
#----------------------------------------------------------------------------------------------------------------------
veg.mean.post <-
sapply(names(veg.comp),function(z) {
apply(veg.comp[[z]],c(1,2),function(x) mean(x,na.rm=TRUE))
})
total.dat <- as.data.frame(cbind(rep(meters.east,length(meters.north)),rep(meters.north,each = length(meters.east)),
veg.mean.post))
colnames(total.dat)[1:2] <-c('meters.east','meters.north')
#source(paste(help.fun.loc,'load_vegetation_data_median.R',sep=''))
veg_mean <- total.dat
colnames(veg_mean)[1:2] <- c('meters.east','meters.north')
#veg_mean <- readr::read_csv('data/composition_v0.3.csv')
coords.neus <- matrix(ncol=2,c(rep(c(-79,-67),each =2),rep(c(39.5,47.5),2)))
coords.neus <- as.data.frame(coords.neus)
colnames(coords.neus) <- c('Lon','Lat')
pol_box <- bbox_tran(coords.neus, '~ Lon + Lat',
'+init=epsg:4326',
'+init=epsg:4326')
veg_box <- bbox_tran(coords.neus, '~ Lon + Lat',
'+init=epsg:4326',
'+init=epsg:3175')
#extract vegetation data that is in the bounding box
veg_mean <- veg_mean[(veg_mean$meters.east>veg_box[1]) & (veg_mean$meters.north>veg_box[2]),]
veg_mean <- veg_mean[!is.na(veg_mean$Ash),]
veg_mean <- replace(veg_mean,veg_mean==0,2e-7) #does this have an effect
setwd(paste0(wd,'calibration/'))
data.loc <- 'data/'
veg_table <- readr::read_csv(paste(data.loc,'/veg_trans_edited_only_abies.csv',sep=''))
veg_trans <- translate_taxa(veg_mean, veg_table ,id_cols = colnames(veg_mean)[1:2])
r <- veg_trans[,!colnames(veg_trans)%in%c("meters.east","meters.north")]
r[,"Other hardwood"] <- rowSums(r[,c("Other hardwood","Elm","Poplar")])
r <- r[,!colnames(r)%in%c("Elm","Poplar")]
saveRDS(r,paste(data.loc,'veg_mean_dissimilarity.RDS',sep=''))
#load data
library(rstan)
library(RColorBrewer)
library(fields)
library(sp)
library(maptools)
library(colorRamps)
library(rioja)
#-----------------------------------------------------------------------------------------------
setwd(paste0(wd,'prediction/'))
help.fun.loc <- 'utils/'
rm(list=ls())
#define working directory
wd <- '~/r_code_calibration_paper/'
#load data
library(rstan)
library(RColorBrewer)
library(fields)
library(sp)
library(maptools)
library(colorRamps)
library(rioja)
#-----------------------------------------------------------------------------------------------
setwd(paste0(wd,'prediction/'))
help.fun.loc <- 'utils/'
data.loc <- 'output_nb//'
plot.loc <- 'plots/'
#-----------------------------------------------------------------------------------------------
us.shp <- readShapeLines('data/map_data/us_alb.shp',proj4string=CRS('+init=epsg:3175'))
#-----------------------------------------------------------------------------------------------
taxa <- sort(c('Maple','Birch','Hickory','Chestnut','Other conifer','Other hardwood',
'Beech','Ash','Tamarack','Spruce','Pine','Oak','Hemlock'))
K <- length(taxa)
proc.output.loc <- 'process_output/'
mean.proportion <- readRDS(paste(proc.output.loc,'combined_mean.RDS',sep=''))
median.proportion <-readRDS(paste(proc.output.loc,'combined_median.RDS',sep=''))
lb.proportion <- readRDS(paste(proc.output.loc,'combined_lb.RDS',sep=''))
ub.proportion <- readRDS(paste(proc.output.loc,'combined_ub.RDS',sep=''))
#--------------------------------------------------------------------------------------------------------------------------
#load vegetation data
load(paste0(wd,'calibration/data/for_prediction_110_sites_only_abies_new_species.RData'))
r <- readRDS(paste0(wd,'calibration/data/veg_mean_dissimilarity.RDS'))
mean.rec.sqrt <- sqrt(mean.proportion)
mean.obs.sqrt <- sqrt(r)
#-------------------------------------------------------------------------------
core.loc.rec <- mean.rec.sqrt[unique(idx_cores),]
core.loc.obs <- mean.obs.sqrt[unique(idx_cores),]
dissimilarity.dep.sites <-
sapply(1:nrow(core.loc.rec),function(x){
as.matrix(paldist((rbind(core.loc.rec[x,],core.loc.obs[x,])),dist.method='euclidean'))[1,2]
})
#--------------------------------------------------------------------------------
other.loc.rec <- mean.rec.sqrt[!(1:nrow(mean.rec.sqrt))%in%unique(idx_cores),]
other.loc.obs <- mean.obs.sqrt[!(1:nrow(mean.obs.sqrt))%in%unique(idx_cores),]
dissimilarity.other.sites <-
sapply(1:nrow(other.loc.rec),function(x){
as.matrix(paldist((rbind(other.loc.rec[x,],other.loc.obs[x,])),dist.method='euclidean'))[1,2]
})
dissimilarity.other.sites
#----------------------------------------------------------------------------------
#compare means
mean.other <- mean(dissimilarity.other.sites)
mean.dep <- mean(dissimilarity.dep.sites)
mean.other
mean.dep <- mean(dissimilarity.dep.sites)
t.test(dissimilarity.other.sites^2,dissimilarity.dep.sites^2)
dissimilarity.tot <-
sapply(1:nrow(mean.rec.sqrt),function(x){
as.matrix(paldist(rbind(mean.proportion[x,],r[x,])))[1,2]
})
#####################################################################################################################
# plot dissimilarities
#####################################################################################################################
breaks <- 2*c(0,0.025,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,1)
categories <- cut(dissimilarity.tot,breaks,include.lowest = TRUE,labels = FALSE)
colours <- rev(brewer.pal(10,'RdYlBu'))
colours.plot <- colours[categories]
east <- sort(unique(veg_coords[,'meters.east']))
north <- sort(unique(veg_coords[,'meters.north']))
breaks1 <- 2*c(0,0.025,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,0.7)
breaks2 <- 2*c(0,0.025,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,NA)
sputm <- SpatialPoints(pollen_coords, proj4string=CRS("+init=epsg:4326"))
spgeo <- spTransform(sputm, CRS("+init=epsg:3175"))
pollen_coord_us <- spgeo@coords
x1 <- '110_sites_umw'#strsplit(x,'.csv')[[1]][1]
par(oma=c(1,1,1,2),cex = 0.8,cex.axis = 0.8)
plot(us.shp,xlim=range(east),ylim=range(north),main= "Dissimilarity Map")
image.plot(east, north,z = matrix(ncol= length(north),rep(-1,length(east)*length(north))),zlim=c(0,0.7),col = colours,
breaks= breaks1,lab.breaks = breaks2,cex.axis = 0.8,add=TRUE,legend.lab = 'Sq. Chord Distance',legend.line = 2.5)
points(veg_coords,col=colours.plot,pch = 15)
plot(us.shp,add=TRUE)
points(pollen_coord_us,col=1,pch = 16,cex = 0.75)
#---------------------------------------------------------------------------------------------------------------------
#load REVEALS predictions
reveals_gridded <- readRDS(paste0(wd,'data/reveals_mean_gridded.RDS'))
#---------------------------------------------------------------------------------------------------------------------
#load REVEALS predictions
reveals_gridded <- readRDS(paste0(wd,'Reveals_NEUS/data/reveals_mean_gridded.RDS'))
colnames(reveals_gridded) <- unlist(strsplit(colnames(reveals_gridded),'[.]'))[seq(1,2*ncol(reveals_gridded),2)]
colnames(reveals_gridded)[grep('Other',colnames(reveals_gridded))] <- c('Other conifer','Other hardwood')
#again load meanof Paciorek et al.
r <- readRDS(paste0(wd,'calibration/data/veg_mean_dissimilarity.RDS'))
r_reveals <- r[,colnames(r)%in%colnames(reveals_gridded)]
r_reveals <- r_reveals[!is.na(reveals_gridded[,"Beech"]),]
r_reveals <- r_reveals/rowSums(r_reveals)
reveals_gridded_complete <- reveals_gridded[!is.na(reveals_gridded[,"Beech"]),]
dissimilarity.reveals <-
sapply(1:nrow(r_reveals),function(x){
as.matrix(paldist(rbind(r_reveals[x,],reveals_gridded_complete[x,])))[1,2]
})
#---------------------------------------------------------------------------------------------------------------------
stepps_11_taxa <- mean.proportion[,colnames(mean.proportion)%in%colnames(reveals_gridded)]
stepps_11_taxa <- stepps_11_taxa/rowSums(stepps_11_taxa)
stepps_11_taxa_coverage_reveals <- stepps_11_taxa[!is.na(reveals_gridded[,"Beech"]),]
r_11_taxa <- r[,colnames(r)%in%colnames(reveals_gridded)]
r_11_taxa <- r_11_taxa/rowSums(r_11_taxa)
#---------------------------------------------------------------------------------------------------------------------
stepps_11_taxa <- mean.proportion[,colnames(mean.proportion)%in%colnames(reveals_gridded)]
stepps_11_taxa <- stepps_11_taxa/rowSums(stepps_11_taxa)
stepps_11_taxa_coverage_reveals <- stepps_11_taxa[!is.na(reveals_gridded[,"Beech"]),]
reveals_gridded[,"Beech"]
!is.na(reveals_gridded[,"Beech"])
dim(stepps_11_taxa)
source(paste0(wd,'Reveals_NEUS/R/gridded_REVEALS.R'))
#---------------------------------------------------------------------------------------------------------------------
#load REVEALS predictions
reveals_gridded <- readRDS(paste0(wd,'Reveals_NEUS/data/reveals_mean_gridded.RDS'))
dim(reveals_gridded)
colnames(reveals_gridded) <- unlist(strsplit(colnames(reveals_gridded),'[.]'))[seq(1,2*ncol(reveals_gridded),2)]
colnames(reveals_gridded)[grep('Other',colnames(reveals_gridded))] <- c('Other conifer','Other hardwood')
#again load meanof Paciorek et al.
r <- readRDS(paste0(wd,'calibration/data/veg_mean_dissimilarity.RDS'))
r_reveals <- r[,colnames(r)%in%colnames(reveals_gridded)]
r_reveals <- r_reveals[!is.na(reveals_gridded[,"Beech"]),]
r_reveals <- r_reveals/rowSums(r_reveals)
reveals_gridded_complete <- reveals_gridded[!is.na(reveals_gridded[,"Beech"]),]
dissimilarity.reveals <-
sapply(1:nrow(r_reveals),function(x){
as.matrix(paldist(rbind(r_reveals[x,],reveals_gridded_complete[x,])))[1,2]
})
#---------------------------------------------------------------------------------------------------------------------
stepps_11_taxa <- mean.proportion[,colnames(mean.proportion)%in%colnames(reveals_gridded)]
stepps_11_taxa <- stepps_11_taxa/rowSums(stepps_11_taxa)
stepps_11_taxa_coverage_reveals <- stepps_11_taxa[!is.na(reveals_gridded[,"Beech"]),]
r_11_taxa <- r[,colnames(r)%in%colnames(reveals_gridded)]
r_11_taxa <- r_11_taxa/rowSums(r_11_taxa)
dissimilarity.stepps_11_taxa<-
sapply(1:nrow(r_11_taxa),function(x){
as.matrix(paldist(rbind(r_11_taxa [x,],stepps_11_taxa[x,])))[1,2]
})
t.test(dissimilarity.reveals,dissimilarity.stepps_11_taxa)
dissimilarity.stepps_11_taxa_coverage_reveals<-
sapply(1:nrow(r_reveals),function(x){
as.matrix(paldist(rbind(r_reveals[x,],stepps_11_taxa_coverage_reveals[x,])))[1,2]
})
t.test(dissimilarity.reveals,dissimilarity.stepps_11_taxa_coverage_reveals,paired=TRUE)
dissimilarity.reveals
mean(dissimilarity.reveals)
dissimilarity.stepps_11_taxa_coverage_reveals
mean(dissimilarity.stepps_11_taxa_coverage_reveals)
######################################################################################################################
#
######################################################################################################################
comparison_dissimilarities <- cbind(summary(dissimilarity.tot),
summary(dissimilarity.stepps_11_taxa_coverage_reveals),
summary(dissimilarity.reveals))
comparison_dissimilarities
