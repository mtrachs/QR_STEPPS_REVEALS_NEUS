---
title: "DISQOVER - Quantitative vegetation modelling from pollen data"
author: "Martin Theuerkauf"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{DISQOVER - Quantitative vegetation modelling from pollen data}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---


## DISQOVER package

The DISQOVER package is a platform for methods that enable quantitative interpretion of pollen data. The package includes R versions of well established as well as newly developed models:

- REVEALS - Modelling regional vegetation composition

- MARCO POLO - Modelling local vegetation composition

- Extended Downscaling Approach (EDA) - Modelling vegetation patterns in landscapes

- Extended R-value model (ERV) - Calculating pollen productivity estimates from surface pollen data


## Why do we need models to interprete pollen data?

Pollen from lakes, mires and other deposits is the most comprehensive record of past vegetation.  However, we cannot easily translate pollen into past vegetation composition, mainly for three reasons:

1. Production bias: the amount of pollen produced differs between plant taxa by orders of magnitude
2. Dispersal bias: some pollen types may be more easily dispersed than others
3. Homogeneity bias:  pollen records include pollen both from nearby and far away sources that usually differ in vegetation composition.

To interpret pollen data in terms of past plant abundances, they have to be corrected for theses biases.
<br>
<br>

*Early developments*

Ad-hoc attempts to correct over- and underrepresentation of plant taxa in the pollen record have a long history. The first well-known formalized approach is the R-value approach by Davis (1963), later refined to the extended R-value approach by Parsons and Prentice (1981). The R-value approach uses a taxon-specific correction factor (the ratio of R-values) to correct for production and dispersal bias at the same time. R-values are therefore basin specific: they have to be calibrated separately for each basin type.
<br>
<br>

*Palynology after Y2K*

The REVEALS model (Sugita 2007) overcomes this limitation by correcting the production bias and the dispersal bias separately. It uses pollen productivity estimates (PPEs) to account for the production bias and pollen fall speeds and the associated ‘pollen dispersal-deposition coefficient’ or K-factor to account for the dispersal bias. The K-factor represents how much pollen of a taxon is deposited in a lake or peatland with a known diameter compared to the amount of pollen deposited in a basin with a zero diameter; K is 1 in a basin with zero diameter and declines with increasing basin size. K-factors are calculated with a specific pollen dispersal model. The REVEALS model uses regional pollen deposition and aims at reconstructing vegetation composition in a large area surrounding the sample point.

The LOVE model (Sugita 2007b) instead aims at reconstructing vegetation composition on a local stand scale. To that end, LOVE combines pollen deposition from large and small sites. LOVE requires REVEALS output and both models are combined in the Landscape Reconstruction Algorithm (LRA). Like the LRA, the MARCO POLO model (Spangenberg 2008, Mrotzek 2015) reconstructs local vegetation composition by combining pollen data from large and small sites. Unlike the LRA, MARCO POLO does not rely on a pollen dispersal model, but distinguishes pollen from nearby and far away  using manipulations of the pollen sum.

REVEALS is applied with the assumption that the vegetation cover of the region is homogeneous, an assumption that is rarely met in reality. The problem is most obvious in the disturbing effects that shore vegetation can have on the pollen record found in a lake. For example, high pollen values of Alnus in a lake may solely derive from a small fringe of Alnus trees around the lake. A REVEALS reconstruction would instead detect Alnus as an important element of the regional vegetation.

Therefore, in situations where regional vegetation is expected to be patchy, approaches that do not rely on homogeneity are preferable. For a single site, the multiple scenario approach aims to detect vegetation mosaics on the basis of known landscape patterns (Fyfe 2006; Bunting et al. 2008). The extended downscaling approach (EDA) follows the same goal, but uses many sites in an forward modelling approach (Theuerkauf et al. 2014).




## REVEALSinR

The REVEALS model, introduced by Shinya Sugita in 2007,  aims to translate pollen data from large sites into regional vegetation composition. The model applies pollen productivity estimates (PPEs) to account for the productivity bias and a 'dispersal and deposition factor' K to account for the dispersal bias in pollen data. K is calculated with a dispersal model.  REVEALS does not account for the homogeneity bias; we thus have to assume that the vegetation of the pollen source area has been homogeneous. 

The REVEALSinR function is an R implementation of the REVEALS model (Theuerkauf et al. 2016). By default, it uses a Lagrangian stochastic dispersal model (Kuparinen et al. 2007) to calculate the K factor for each taxon. Further options are available. To arrive at error estimates, model runs are repeated at least 1000 times with random error added in pollen data and PPEs during each model run. To account for pollen deposition in lakes, a lake model is included. For details see the documentation of the DISQOVER package.
<br>
<br>

*Application:*

Using the REVEALS model with REVEALSinR requires a single function call. Model runs require two files, the pollen data file and the parameter file with taxon specific parameters. By default, both files should be provided as comma separated text files (csv). Alternatively, spread sheet files (‘xls’ or ‘xlsx’) may be used. For file formatting, see the example files from our publication.
<br>
<br>

*Requiered parameters:*

  - pollen: pollen counts
  - params: fall speed of pollen (in m s-1) and relative pollen productivity (PPE or RPP) for each taxon
  - tBasin: basin type, either ‘lake’ or ‘peatland’
  - dBasin:  basin diameter in meter
<br>
<br>

*Optional parameters:*

  - dwm (default = lsm_unstable): Distance weighting model. By default the Lagrangian Stochastic model (Kuparinen et al. 2007) adjusted for unstable atmospheric conditions is used. Further options are available.
  - repeats (default = 1e3): Model runs per time slice
  - regionCutoff (default = 1e5): Diameter of the reconstruction region in meters
  - ppefun (default = rnorm_reveals): Function to randomise PPEs
  - pollenfun (default = rmultinom_reveals): Function to randomise pollen counts
  - writeresults (default = TRUE): Bboolean, indicats wether to write results to csv-files or to return them on the command-line
  - verbose (default = TRUE): Boolean, indicating whether to print progress messages
<br>
<br>

*Output:*

REVEALSinR produces for each sample the mean, median, standard deviatian, 10% and 90% quantile of the repeated model runs.
<br>
<br>

*Example function calls:*

To explore REVEALSinR you may use example data from our Lake Tiefer See study. The example includes the pollen data file and the parameter file in three versions (English/US csv format, German csv format and Excel format) and example R code to run REVEALSinR with these three file versions.
<br>
<br>

```{}
## Application on a core section from Lake Tiefer See,
## covering the period 1880 t0 2010 CE:
data("Tiefer_See")

## inspect the sample data
pollenTS
paramsTS

## and apply REVEALS...
cover <- REVEALSinR(pollenTS, paramsTS, dwm='lsm unstable', tBasin='lake', dBasin=600)

## plot results as stratigraphic diagram ('pollen diagram')
plotREVEALS(cover, type = "single", ytitle = "Age CE")

## plot results as stacked area diagram
plotREVEALS(cover, type = "stacked", ytitle = "Age CE")

## load pollen data from an Excel file (e.g.'Pollen_Tiefer_See_1880-2010.xlsx')
## first set working directory to file location, then set file name:
datafile <- 'Pollen_Tiefer_See_1880-2010.xlsx'
## aktuell? guck mal beim kurs
pollen <- do.call(read_excel,args=c(list(datafile,sheet = 1))) # function reads first worksheet

## load parameters from an Excel file (e.g.'pf_PPE_MV2015.xlsx')
## first set working directory to file location, then set file name:
datafile <- 'pf_PPE_MV2015.xlsx'  # change working directory if needed
## aktuell? guck mal beim kurs
params <- do.call(read_excel,args=c(list(datafile,sheet = 1))) #function reads first worksheet

## application on a single sample:
data("Tiefer_See")
abc<-REVEALS(t(pollenTS[1,,drop=FALSE]), ppes=paramsTS[,c(1,3:4)],rep=10,write=FALSE,verbose=FALSE,depo=do.call(rbind,lapply(paramsTS[,2], DispersalFactorK, dwm='lsm unstable', tBasin='peatland', dBasin=1e5, regionCutoff=1e5)))
matplot(sapply(abc,function(x)x),type="l")
```
 

## MarcoPolo

MARCO POLO stands for MAnipulating pollen sums to ReCOnstruct POllen of Local Origin. The model, introduced by Mrotzek et al. 2017, is a tool for quantitative vegetation reconstruction at the stand scale from pollen records of small sites. MARCO POLO compares a pollen record from a small site with an adjacent regional record from a large water body or peatland to determine the (extra-)local component that dominates pollen deposition at the small site.

Hitherto, the Landscape Reconstruction Algorithm (LRA) has been the only truly quantitative approach to stand-scale palynology. However, the LRA requires information on pollen productivity and dispersal, which is not always available. The alternative approach MARCO POLO is solely based on pollen values and does not rely on a pollen dispersal function. In a stepwise fashion, MARCO POLO removes those pollen types from the pollen sum whose values are significantly higher than in a neighbouring large basin. The resulting regional pollen sum is free of the disturbing factor of (extra-)local pollen. Based on this sum, comparison with the pollen record from the large basin allows calculating sharp (extra-)local signals.

Treating the (extra-)local pollen portion with representation factors (R-values, Davis 1963) then produces a quantitative reconstruction of the stand-scale vegetation composition. Whereas correction factors are available for (most) arboreal taxa (e.g. Andersen 1970, Bradshaw 1981), they are generally lacking for taxa indicative of open vegetation and human activity. Yet, the tool is able to detect presence/absence of taxa even if correction factors are not available.
<br>
<br>

*Application and parameters:*

The R function MarcoPolo only requires local and regional pollen data, a table that assigns each local pollen spectrum to a regional spectrum and R-values for each taxon. The following parameters are needed:


- local: local pollen data
- regional: regional pollen data
- assignment: table naming the regional record for each local record
- params: R-values for each taxon

All local pollen samples must be provided in a table with samples in columns and pollen taxa in rows, the first column includes taxon names, the first row includes sample names (with no spaces!). In the example below, each sample represents a single site like in a surface pollen data set. Instead, the samples may derive from a single pollen record, with each sample representing a time window.  



```{r, echo=FALSE, results='asis'}
data("MP_example")
localMP
pander::pandoc.table(head(localMP[1:10,1:11]))

```

Reginal pollen records must provided in the same format, i.e. with exactly the same pollen taxa in the same order. The number of regional records (here 3) may be smaller than the number of local records (here 10).

```{r, echo=FALSE, results='asis'}
library(DISQOVER)
data("MP_example")
pander::pandoc.table(head(regionalMP[1:10,1:4]))

```


Each local pollen sample must be assigned to one of the regional samples. In the case of surface data, the nearest  regional site would usually be selected. In the case of local samples from a core, a regional sample from the same time window should be assigned. 

```{r, echo=FALSE, results='asis'}
library(DISQOVER)
data("MP_example")
pander::pandoc.table(assignmentMP[1:10,1:2])

``` 


Finally, R-values must be provided for each pollen taxon in the following format. 

```{r, echo=FALSE, results='asis'}
library(DISQOVER)
data("MP_example")
pander::pandoc.table(paramsMP[1:6,1:2])

``` 


For data format you may also consult example data 'MP_example' from the package.
<br>
<br>

*Optional parameters:*

For further operations, MarcoPolo writes the results into a comma separated texfile (csv). The default name is "MP_Results.csv". You may change the name with the resultfile parameter.

- resultfile: Name of file for output
<br>
<br>

*Output:*

MarcoPolo produces relative local abundance of each pollen taxon. The function produces no error estimates because uncertainty of the R-value values is unknown. We discuss the limits of the methods below.

<br>
<br>

*Example function calls:*

To explore REVEALSinR you may use example data from our Lake Tiefer See study. The example includes the pollen data file and the parameter file in three versions (English/US csv format, German csv format and Excel format) and example R code to run REVEALSinR with these three file versions.
<br>
<br>


```{}
  ## apply Marco Polo with the sample data from Mrotzek et al. (2017)
  data("MP_example")
  a <- MarcoPolo(localMP, regionalMP, paramsMP, assignmentMP, resultfile = "test.csv")

  ## loading data from an Excel file (e.g. MarcoPoloExampleData.xlsx)
  localMP <- do.call(read_excel,args=c(list(datafile,sheet="local")))
  regionalMP <- do.call(read_excel,args=c(list(datafile,sheet="regional")))
  paramsMP <- do.call(read_excel,args=c(list(datafile,sheet="params")))
  assignmentMP <- do.call(read_excel,args=c(list(datafile,sheet="assignment")))
  a <- MarcoPolo(localMP, regionalMP, paramsMP, assignmentMP, resultfile = "test.csv")
```

*Problems and limits of the Marco Polo approach*

the method assumes that there is a clear distinction between local and regional pollen deposition, and thus assumes a clear distinction between the local and the regional vegetation

source area-vegetation structure



## Extended downscaling approach (EDA)

The EDA (Theuerkauf and Couwenberg 2017) aims to detect past vegetation patterns and communities in the landscape. The EDA uses iterative forward modelling to fit vegetation composition to robust landscape patterns by comparing simulated with actually observed pollen deposition. The approach employs a set of pollen records, preferably from medium sized to large lakes or peatlands, as well as maps of robust landscape patterns, such as soils and relief. 



## Styles

The `html_vignette` template includes a basic CSS theme. To override this theme you can specify your own CSS in the document metadata as follows:

    output: 
      rmarkdown::html_vignette:
        css: mystyles.css

## Figures

The figure sizes have been customised so that you can easily put two images side-by-side. 

```{r, fig.show='hold'}
plot(1:10)
plot(10:1)
```

You can enable figure captions by `fig_caption: yes` in YAML:

    output:
      rmarkdown::html_vignette:
        fig_caption: yes

Then you can use the chunk option `fig.cap = "Your figure caption."` in **knitr**.

## More Examples

You can write math expressions, e.g. $Y = X\beta + \epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.

```{r, echo=FALSE, results='asis'}
knitr::kable(head(mtcars, 10))
```

Also a quote using `>`:

> "He who gives up [code] safety for [code] speed deserves neither."
([via](https://twitter.com/hadleywickham/status/504368538874703872))
