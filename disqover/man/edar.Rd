% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edar.R
\name{edar}
\alias{edar}
\title{Extended Downscaling Approach (EDA)}
\usage{
edar(edav, dwm = "LSM unstable", n = 100, pollenError = TRUE,
  ppeError = TRUE, itermax = 20000, reltol = 0.01, steptol = 500,
  trace = FALSE, parallelType = 1, verbose = TRUE, u = 3)
}
\arguments{
\item{edav}{a list with pollen data, environmental data and parameters, best
produced with the import function edaimportxl()}

\item{dwm}{distance weighting method, defaults to 'lsm_unstable' (Lagrangian
stochastic model), further models are the Gaussian plume model ('gpm
neutral' and 'gpm unstable') and the non-parametric model '1overd'.}

\item{n}{number of EDA rounds. To produce error estimates, EDA calculations
are repeated 'n' times with noise added in pollen counts and/or PPEs. Error
estimates requires a minimum of 51 rounds. The minimum of 'n' is 2}

\item{pollenError}{adds error in pollen data through resampling pollen
counts, defaults to TRUE}

\item{ppeError}{adds error in PPEs on the basis of the given standard error.
Defaults to TRUE}

\item{itermax}{DEoptim control parameter: The maximum iteration (population
generation) allowed. Defaults to 20000}

\item{reltol}{DEoptim control parameter: relative convergence tolerance. The
algorithm stops if it is unable to reduce the value by a factor of reltol *
(abs(val) + reltol) after steptol steps. Here defaults to 0.01}

\item{steptol}{DEoptim control parameter: see reltol. Here defaults to 500}

\item{trace}{DEoptim control parameter: Positive integer or logical value
indicating whether printing of progress occurs at each iteration. The
default value is TRUE. If a positive integer is specified, printing occurs
every trace iterations}

\item{parallelType}{DEoptim control parameter: Defines the type of
parallelization to employ, if any. 0: This uses DEoptim on one only one
core. 1: The default, this uses all available cores, via the parallel
package, to run DEoptim. If parallelType=1, then the packages argument and
the parVar argument need to specify the packages required by the objective
function and the variables required in the environment, respectively. 2:
This uses the foreach package for parallelism; see the sandbox directory in
the source code for examples. If parallelType=2, then the foreachArgs
argument can pass the options to be called with foreach}
}
\value{
The reconstructed local vegetation composition

...median: median cover of each taxon on each environmental class

...mean: mean cover of each taxon on each environmental class

...quantile10: 10\% quantile of the cover of each taxon on each
  environmental class

...quantile90: 90\% quantile of the cover of each taxon on each
  environmental class

...bestmem: optimized cover values from each run (n = number of taxa
  x number of environmental classes)

...bestval: minimum of the target value in each run

...iter: number of iterations in each run
}
\description{
The Extended Downscaling Approach (EDA, Theuerkauf and Couwenberg 2017) aims
to detect past vegetation patterns and communities within landscapes. The EDA
uses iterative forward modelling to fit vegetation composition to robust
landscape patterns by comparing simulated with observed pollen deposition.
The approach employs a set of pollen records, preferably from medium sized to
large lakes or peatlands, as well as environmental data extracted from e.g.
soil maps or digital elevation models. The EDA calculations need time, so
plan several hours.
}
\examples{
# Application with example data from Theuerkauf & Couwenberg (2017)
# load data set "Scenario C"
data(eda_tc17c, package = "disqover")

# view structure and elements of the data set
names(eda_tc17c)
names(eda_tc17c$env)
str(eda_tc17c)

# and run EDA with standard parameters
e <- edar(edav = eda_tc17c)

# edaimportxl() helps to prepare the data from Excel files. It needs three files:
# pollen data, environmental data and taxon parameters. The following example shows the principle
# with external data from the package. First define file names:
pollenfile <- system.file("extdata/eda", "eda_tc17c_pollen.xlsx", package = "disqover")
envfile <- system.file("extdata/eda", "eda_tc17c_environment.xlsx", package = "disqover")
paramsfile <- system.file("extdata/eda", "eda_tc17c_params.xlsx", package = "disqover")

# now use edaimportxl()
eda_tc17c <- edaimportxl(pollenfile, envfile, paramsfile)

}
\references{
Theuerkauf M. and Couwenberg J. (2017) The extended downscaling
  approach: A new R-tool for pollen-based reconstruction of vegetation
  patterns. The Holocene 27(8): 1252â€“1258.
  https://doi.org/10.1177/0959683616683256
}
\author{
Martin Theuerkauf <martin.theuerkauf@uni-greifswald.de>
}
